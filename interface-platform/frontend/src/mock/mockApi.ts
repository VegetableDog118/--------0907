import axios from 'axios'
import MockAdapter from 'axios-mock-adapter'
import type { 
  InterfaceListRequest, 
  InterfaceListResponse, 
  InterfaceDetailResponse,
  InterfaceManagementRequest,
  CreateInterfaceRequest,
  UpdateInterfaceRequest
} from '@/api/interface'
import type { 
  UserRegisterRequest, 
  UserRegisterResponse, 
  UserLoginRequest, 
  UserLoginResponse,
  UserInfoResponse,
  UserUpdateRequest
} from '@/api/user'
import type {
  SubscriptionApplicationRequest,
  ApplicationListRequest,
  ApplicationListResponse,
  ApprovalRequest,
  BatchApprovalRequest
} from '@/api/approval'

// ÂØºÂÖ•mockÊï∞ÊçÆ
import { mockCategories, getCategoryStats } from './categories'
import { 
  mockUsers, 
  mockLoginResponse, 
  getUserByUsername, 
  getUserById, 
  getUserStats 
} from './users'
import { 
  mockInterfaces, 
  mockInterfaceParameters,
  getInterfacesByCategory,
  getInterfacesByStatus,
  searchInterfaces,
  getInterfaceStats,
  getInterfaceDetail
} from './interfaces'
import { 
  mockApplications, 
  mockUserSubscriptions,
  getApprovalStats,
  getApplicationsByUser,
  getApplicationsByStatus,
  getSubscriptionsByUser,
  getApplicationDetailWithInfo
} from './applications'

// ÂàõÂª∫MockÈÄÇÈÖçÂô®
let mockAdapter: MockAdapter | null = null

// ÂàÜÈ°µÂ∑•ÂÖ∑ÂáΩÊï∞
function paginate<T>(data: T[], page: number, size: number) {
  const start = (page - 1) * size
  const end = start + size
  const records = data.slice(start, end)
  const total = data.length
  const pages = Math.ceil(total / size)
  
  return {
    records,
    total,
    current: page,
    size,
    pages,
    hasNext: page < pages,
    hasPrevious: page > 1
  }
}

// Âª∂ËøüÂáΩÊï∞ÔºåÊ®°ÊãüÁΩëÁªúËØ∑Ê±Ç
function delay(ms: number = 300) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

// ÂàùÂßãÂåñMockÊúçÂä°
export function initMockApi() {
  // Â¶ÇÊûúÂ∑≤ÁªèÂàùÂßãÂåñËøáÔºåÂÖàÊ∏ÖÁêÜ
  if (mockAdapter) {
    mockAdapter.restore()
  }

  // ÂàõÂª∫Êñ∞ÁöÑMockÈÄÇÈÖçÂô®ÔºåÊã¶Êà™ÊâÄÊúâaxiosÂÆû‰æã
  mockAdapter = new MockAdapter(axios, { 
    delayResponse: 300,
    onNoMatch: 'passthrough'
  })
  
  console.log('üöÄ Ê≠£Âú®ÂàùÂßãÂåñMock APIÊúçÂä°...')
  console.log('üìä MockÊï∞ÊçÆÁªüËÆ°:')
  console.log('  - ÂàÜÁ±ªÊï∞Èáè:', mockCategories.length)
  console.log('  - Êé•Âè£Êï∞Èáè:', mockInterfaces.length)
  console.log('  - Áî®Êà∑Êï∞Èáè:', mockUsers.length)
  console.log('  - Áî≥ËØ∑Êï∞Èáè:', mockApplications.length)

  // ========== Êé•Âè£Áõ∏ÂÖ≥API ==========
  
  // Ëé∑ÂèñÊé•Âè£ÂàÜÁ±ªÂàóË°®
  mockAdapter.onGet('/api/v1/interfaces/categories').reply(async () => {
    console.log('üìã Mock API: Ëé∑ÂèñÊé•Âè£ÂàÜÁ±ªÂàóË°®')
    console.log('üìã ÂàÜÁ±ªÊï∞ÊçÆ:', mockCategories)
    await delay(200)
    const response = {
      code: 200,
      data: mockCategories,
      message: 'Ëé∑ÂèñÂàÜÁ±ªÂàóË°®ÊàêÂäü'
    }
    console.log('üìã Mock API ÂìçÂ∫î:', response)
    return [200, response]
  })

  // Ëé∑ÂèñÊé•Âè£ÂàóË°®
  mockAdapter.onGet('/api/v1/interfaces/list').reply(async (config) => {
    console.log('üìù Mock API: Ëé∑ÂèñÊé•Âè£ÂàóË°®', config.params)
    console.log('üìù ÂéüÂßãÊé•Âè£Êï∞ÊçÆÈáè:', mockInterfaces.length)
    await delay(300)
    const params = config.params as InterfaceListRequest
    let filteredInterfaces = [...mockInterfaces]
    console.log('üìù ÂàùÂßãÁ≠õÈÄâÂêéÊé•Âè£Êï∞Èáè:', filteredInterfaces.length)

    // ÊåâÂàÜÁ±ªÁ≠õÈÄâ
    if (params.categoryId) {
      filteredInterfaces = getInterfacesByCategory(params.categoryId)
      console.log('üìù ÊåâÂàÜÁ±ªÁ≠õÈÄâÂêéÊé•Âè£Êï∞Èáè:', filteredInterfaces.length)
    }

    // ÊåâÁä∂ÊÄÅÁ≠õÈÄâ
    if (params.status) {
      filteredInterfaces = filteredInterfaces.filter(iface => iface.status === params.status)
      console.log('üìù ÊåâÁä∂ÊÄÅÁ≠õÈÄâÂêéÊé•Âè£Êï∞Èáè:', filteredInterfaces.length)
    }

    // ÂÖ≥ÈîÆËØçÊêúÁ¥¢
    if (params.keyword) {
      const keyword = params.keyword.toLowerCase()
      filteredInterfaces = filteredInterfaces.filter(iface => 
        iface.interfaceName.toLowerCase().includes(keyword) ||
        iface.description?.toLowerCase().includes(keyword) ||
        iface.interfacePath.toLowerCase().includes(keyword)
      )
      console.log('üìù ÂÖ≥ÈîÆËØçÊêúÁ¥¢ÂêéÊé•Âè£Êï∞Èáè:', filteredInterfaces.length)
    }

    const result = paginate(filteredInterfaces, params.page, params.size)
    console.log('üìù ÂàÜÈ°µÁªìÊûú:', result)
    const response = {
      code: 200,
      data: result,
      message: 'Ëé∑ÂèñÊé•Âè£ÂàóË°®ÊàêÂäü'
    }
    console.log('üìù Mock API ÂìçÂ∫î:', response)
    return [200, response]
  })

  // Ëé∑ÂèñÊé•Âè£ËØ¶ÊÉÖ
  mockAdapter.onGet(/\/api\/v1\/interfaces\/(.+)/).reply(async (config) => {
    await delay(250)
    const interfaceId = config.url?.split('/').pop()
    if (!interfaceId) {
      return [404, { success: false, message: 'Êé•Âè£ID‰∏çËÉΩ‰∏∫Á©∫' }]
    }

    const detail = getInterfaceDetail(interfaceId)
    if (!detail) {
      return [404, { success: false, message: 'Êé•Âè£‰∏çÂ≠òÂú®' }]
    }

    return [200, {
      code: 200,
      data: detail,
      message: 'Ëé∑ÂèñÊé•Âè£ËØ¶ÊÉÖÊàêÂäü'
    }]
  })

  // ÊêúÁ¥¢Êé•Âè£
  mockAdapter.onGet('/api/v1/interfaces/search').reply(async (config) => {
    await delay(400)
    const { keyword, page = 1, size = 20 } = config.params
    const results = searchInterfaces(keyword || '')
    const paginatedResults = paginate(results, page, size)
    
    return [200, {
      code: 200,
      data: paginatedResults,
      message: 'ÊêúÁ¥¢ÂÆåÊàê'
    }]
  })

  // Ëé∑ÂèñÊé•Âè£ÂèÇÊï∞
  mockAdapter.onGet(/\/api\/v1\/interfaces\/(.+)\/parameters/).reply(async (config) => {
    await delay(200)
    const interfaceId = config.url?.split('/')[4]
    if (!interfaceId) {
      return [404, { success: false, message: 'Êé•Âè£ID‰∏çËÉΩ‰∏∫Á©∫' }]
    }

    const parameters = mockInterfaceParameters[interfaceId] || []
    return [200, {
      code: 200,
      data: parameters,
      message: 'Ëé∑ÂèñÊé•Âè£ÂèÇÊï∞ÊàêÂäü'
    }]
  })

  // ÊµãËØïÊé•Âè£Ë∞ÉÁî®
  mockAdapter.onPost(/\/api\/v1\/interfaces\/(.+)\/test/).reply(async (config) => {
    await delay(800)
    const interfaceId = config.url?.split('/')[4]
    const interfaceInfo = mockInterfaces.find(iface => iface.id === interfaceId)
    
    if (!interfaceInfo) {
      return [404, { success: false, message: 'Êé•Âè£‰∏çÂ≠òÂú®' }]
    }

    // Ê®°ÊãüÊµãËØïÁªìÊûú
    const mockResult = {
      success: true,
      data: {
        executionTime: Math.floor(Math.random() * 500) + 100,
        resultCount: Math.floor(Math.random() * 100) + 1,
        sampleData: [
          { id: 1, name: 'ÊµãËØïÊï∞ÊçÆ1', value: Math.random() * 100 },
          { id: 2, name: 'ÊµãËØïÊï∞ÊçÆ2', value: Math.random() * 100 }
        ]
      },
      message: 'Êé•Âè£ÊµãËØïÊàêÂäü'
    }

    return [200, mockResult]
  })

  // Ëé∑ÂèñÊé•Âè£ÁªüËÆ°‰ø°ÊÅØ
  mockAdapter.onGet('/api/v1/interfaces/stats').reply(async () => {
    await delay(300)
    const stats = getInterfaceStats()
    return [200, {
      code: 200,
      data: stats,
      message: 'Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØÊàêÂäü'
    }]
  })

  // ========== Áî®Êà∑Áõ∏ÂÖ≥API ==========

  // Áî®Êà∑ÁôªÂΩï
  mockAdapter.onPost('/api/v1/users/login').reply(async (config) => {
    console.log('üîê Mock API: Áî®Êà∑ÁôªÂΩï', JSON.parse(config.data))
    await delay(500)
    const loginData = JSON.parse(config.data) as UserLoginRequest
    
    // ÁÆÄÂçïÈ™åËØÅ
    if (loginData.account === 'admin' && loginData.password === '123456') {
      return [200, {
        code: 200,
        data: mockLoginResponse,
        message: 'ÁôªÂΩïÊàêÂäü'
      }]
    }

    // Ê£ÄÊü•ÂÖ∂‰ªñÁî®Êà∑
    const user = getUserByUsername(loginData.account)
    if (user && loginData.password === '123456') {
      const loginResponse = {
        ...mockLoginResponse,
        userId: user.userId,
        username: user.username,
        companyName: user.companyName,
        role: user.role
      }
      return [200, {
        code: 200,
        data: loginResponse,
        message: 'ÁôªÂΩïÊàêÂäü'
      }]
    }

    return [401, {
      code: 401,
      message: 'Áî®Êà∑ÂêçÊàñÂØÜÁ†ÅÈîôËØØ'
    }]
  })

  // Áî®Êà∑Ê≥®ÂÜå
  mockAdapter.onPost('/api/v1/users/register').reply(async (config) => {
    await delay(600)
    const registerData = JSON.parse(config.data) as UserRegisterRequest
    
    // Ê£ÄÊü•Áî®Êà∑ÂêçÊòØÂê¶Â∑≤Â≠òÂú®
    const existingUser = getUserByUsername(registerData.username)
    if (existingUser) {
      return [400, {
        code: 400,
        message: 'Áî®Êà∑ÂêçÂ∑≤Â≠òÂú®'
      }]
    }

    const response: UserRegisterResponse = {
      userId: `user-${Date.now()}`,
      status: 'pending',
      createTime: new Date().toISOString(),
      message: 'Ê≥®ÂÜåÁî≥ËØ∑Â∑≤Êèê‰∫§ÔºåËØ∑Á≠âÂæÖÂÆ°Ê†∏'
    }

    return [200, {
      code: 200,
      data: response,
      message: 'Ê≥®ÂÜåÊàêÂäü'
    }]
  })

  // Ëé∑ÂèñÂΩìÂâçÁî®Êà∑‰ø°ÊÅØ
  mockAdapter.onGet('/api/v1/users/profile').reply(async () => {
    await delay(200)
    // ÈªòËÆ§ËøîÂõûadminÁî®Êà∑‰ø°ÊÅØ
    const userInfo = mockUsers[0]
    return [200, {
      code: 200,
      data: userInfo,
      message: 'Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÊàêÂäü'
    }]
  })

  // Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØ
  mockAdapter.onPut('/api/v1/users/profile').reply(async (config) => {
    await delay(400)
    const updateData = JSON.parse(config.data) as UserUpdateRequest
    
    return [200, {
      code: 200,
      data: null,
      message: 'Áî®Êà∑‰ø°ÊÅØÊõ¥Êñ∞ÊàêÂäü'
    }]
  })

  // Áî®Êà∑ÁôªÂá∫
  mockAdapter.onPost('/api/v1/users/logout').reply(async () => {
    await delay(200)
    return [200, {
      code: 200,
      data: null,
      message: 'ÁôªÂá∫ÊàêÂäü'
    }]
  })

  // ========== Áî≥ËØ∑ÂÆ°ÊâπÁõ∏ÂÖ≥API ==========

  // Êèê‰∫§ËÆ¢ÈòÖÁî≥ËØ∑
  mockAdapter.onPost('/api/v1/applications').reply(async (config) => {
    await delay(500)
    const applicationData = JSON.parse(config.data) as SubscriptionApplicationRequest
    
    const applicationId = `app-${Date.now()}`
    return [200, {
      code: 200,
      data: applicationId,
      message: 'Áî≥ËØ∑Êèê‰∫§ÊàêÂäü'
    }]
  })

  // Ëé∑ÂèñÁî≥ËØ∑ÂàóË°®
  mockAdapter.onGet('/api/v1/applications').reply(async (config) => {
    await delay(300)
    const params = config.params as ApplicationListRequest
    let filteredApplications = [...mockApplications]

    // ÊåâÁä∂ÊÄÅÁ≠õÈÄâ
    if (params.status) {
      filteredApplications = getApplicationsByStatus(params.status)
    }

    // ÊåâÁî®Êà∑Á≠õÈÄâ
    if (params.userId) {
      filteredApplications = getApplicationsByUser(params.userId)
    }

    // ÊåâÊó∂Èó¥Á≠õÈÄâ
    if (params.startDate) {
      filteredApplications = filteredApplications.filter(app => app.submitTime >= params.startDate!)
    }
    if (params.endDate) {
      filteredApplications = filteredApplications.filter(app => app.submitTime <= params.endDate!)
    }

    const result = paginate(filteredApplications, params.page, params.size)
    return [200, {
      code: 200,
      data: result,
      message: 'Ëé∑ÂèñÁî≥ËØ∑ÂàóË°®ÊàêÂäü'
    }]
  })

  // Ëé∑ÂèñÁî≥ËØ∑ËØ¶ÊÉÖ
  mockAdapter.onGet(/\/api\/v1\/applications\/(.+)/).reply(async (config) => {
    await delay(250)
    const applicationId = config.url?.split('/').pop()
    if (!applicationId) {
      return [404, { success: false, message: 'Áî≥ËØ∑ID‰∏çËÉΩ‰∏∫Á©∫' }]
    }

    const detail = getApplicationDetailWithInfo(applicationId)
    if (!detail) {
      return [404, { success: false, message: 'Áî≥ËØ∑‰∏çÂ≠òÂú®' }]
    }

    return [200, {
      code: 200,
      data: detail,
      message: 'Ëé∑ÂèñÁî≥ËØ∑ËØ¶ÊÉÖÊàêÂäü'
    }]
  })

  // ÂÆ°ÊâπÁî≥ËØ∑
  mockAdapter.onPost('/api/v1/applications/approve').reply(async (config) => {
    await delay(600)
    const approvalData = JSON.parse(config.data) as ApprovalRequest
    
    return [200, {
      code: 200,
      data: null,
      message: `Áî≥ËØ∑Â∑≤${approvalData.action === 'approve' ? 'ÊâπÂáÜ' : 'ÊãíÁªù'}`
    }]
  })

  // ÊâπÈáèÂÆ°Êâπ
  mockAdapter.onPost('/api/v1/applications/batch-approve').reply(async (config) => {
    await delay(800)
    const batchData = JSON.parse(config.data) as BatchApprovalRequest
    
    return [200, {
      code: 200,
      data: null,
      message: `ÊâπÈáè${batchData.action === 'approve' ? 'ÊâπÂáÜ' : 'ÊãíÁªù'}ÊàêÂäü`
    }]
  })

  // Ëé∑ÂèñÁî®Êà∑ËÆ¢ÈòÖÂàóË°®
  mockAdapter.onGet('/api/v1/subscriptions').reply(async (config) => {
    await delay(300)
    const { userId, page = 1, size = 20 } = config.params
    let subscriptions = [...mockUserSubscriptions]

    if (userId) {
      subscriptions = getSubscriptionsByUser(userId)
    }

    const result = paginate(subscriptions, page, size)
    return [200, {
      success: true,
      data: result,
      message: 'Ëé∑ÂèñËÆ¢ÈòÖÂàóË°®ÊàêÂäü'
    }]
  })

  // ========== ÁªüËÆ°Áõ∏ÂÖ≥API ==========

  // Ëé∑ÂèñÂÆ°ÊâπÁªüËÆ°
  mockAdapter.onGet('/api/v1/statistics/approval').reply(async () => {
    await delay(300)
    const stats = getApprovalStats()
    return [200, {
      code: 200,
      data: stats,
      message: 'Ëé∑ÂèñÂÆ°ÊâπÁªüËÆ°ÊàêÂäü'
    }]
  })

  // Ëé∑ÂèñÁî®Êà∑ÁªüËÆ°
  mockAdapter.onGet('/api/v1/statistics/users').reply(async () => {
    await delay(300)
    const stats = getUserStats()
    return [200, {
      success: true,
      data: stats,
      message: 'Ëé∑ÂèñÁî®Êà∑ÁªüËÆ°ÊàêÂäü'
    }]
  })

  // Ëé∑ÂèñÂàÜÁ±ªÁªüËÆ°
  mockAdapter.onGet('/api/v1/statistics/categories').reply(async () => {
    await delay(200)
    const stats = getCategoryStats()
    return [200, {
      code: 200,
      data: stats,
      message: 'Ëé∑ÂèñÂàÜÁ±ªÁªüËÆ°ÊàêÂäü'
    }]
  })

  // Ê∑ªÂä†ÈÄöÁî®Êã¶Êà™Âô®ÔºåÊçïËé∑ÊâÄÊúâÊú™ÂåπÈÖçÁöÑËØ∑Ê±Ç
  mockAdapter.onAny().reply((config) => {
    console.warn('‚ö†Ô∏è Êú™ÂåπÈÖçÁöÑAPIËØ∑Ê±Ç:', config.method?.toUpperCase(), config.url)
    return [404, {
       code: 404,
       message: `APIÊé•Âè£Êú™ÊâæÂà∞: ${config.method?.toUpperCase()} ${config.url}`
     }]
  })

  console.log('üé≠ Mock API ÊúçÂä°Â∑≤ÂêØÂä®')
  console.log('üìä Â∑≤Âä†ËΩΩÊ†∑‰æãÊï∞ÊçÆÔºö')
  console.log(`  - Êé•Âè£ÂàÜÁ±ª: ${mockCategories.length} ‰∏™`)
  console.log(`  - Êé•Âè£Êï∞ÊçÆ: ${mockInterfaces.length} ‰∏™`)
  console.log(`  - Áî®Êà∑Êï∞ÊçÆ: ${mockUsers.length} ‰∏™`)
  console.log(`  - Áî≥ËØ∑Êï∞ÊçÆ: ${mockApplications.length} ‰∏™`)
  console.log(`  - ËÆ¢ÈòÖÊï∞ÊçÆ: ${mockUserSubscriptions.length} ‰∏™`)
  console.log('üîç MockÊã¶Êà™Âô®Â∑≤ÈÖçÁΩÆÔºåÂ∞ÜÊã¶Êà™ÊâÄÊúâaxiosËØ∑Ê±Ç')
}

// ÂÅúÊ≠¢MockÊúçÂä°
export function stopMockApi() {
  if (mockAdapter) {
    mockAdapter.restore()
    mockAdapter = null
    console.log('üõë Mock API ÊúçÂä°Â∑≤ÂÅúÊ≠¢')
  }
}

// Ê£ÄÊü•MockÊúçÂä°Áä∂ÊÄÅ
export function isMockApiActive(): boolean {
  return mockAdapter !== null
}